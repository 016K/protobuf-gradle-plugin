buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:${rootProject.version}"
  }
}
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    nanoCompile
    grpcCompile
}

sourceSets {
  nano {
    compileClasspath += configurations.nanoCompile
  }
  grpc {
    compileClasspath += configurations.grpcCompile
  }
  grpc_nano {
    compileClasspath += configurations.grpcCompile
  }
  test {
    compileClasspath += nano.output
    compileClasspath += grpc.output
    compileClasspath += grpc_nano.output
    runtimeClasspath += nano.output
    runtimeClasspath += grpc.output
    runtimeClasspath += grpc_nano.output
  }
}

def protobufDep = 'com.google.protobuf:protobuf-java:3.0.0-alpha-2'
def protobufNanoDep = 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-2'
def grpcDep = 'io.grpc:grpc-all:0.7.0'

dependencies {
    compile protobufDep
    protobuf files("lib/protos.tar.gz")
    //protobuf files("ext/test1.proto", "ext/test2.proto")
    protobuf fileTree("ext/") {
        //exclude 'more.proto'
    }
    testProtobuf files("lib/protos-test.tar.gz")
    testCompile 'junit:junit:4.7', protobufNanoDep
    nanoCompile protobufNanoDep
    grpcCompile protobufNanoDep, grpcDep
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0-alpha-2'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:0.7.0'
    }
  }
  generateProtoTasks {
    ofSourceSet('nano')*.builtins {
      remove java
      javanano {
        option 'java_multiple_files=true'
      }
    }
    ofSourceSet('grpc')*.plugins {
      // No options. Note the braces cannot be omitted, otherwise the plugin
      // will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
    ofSourceSet('grpc_nano').each { task ->
      task.builtins {
        remove java
        javanano {
          option 'ignore_services=true'
        }
      }
      task.plugins {
        grpc {
          option 'nano=true'
        }
      }
    }
  }
}

def assertJavaCompileHasProtoGeneratedDir(String sourceSet, Collection<String> codegenPlugins) {
  def compileJavaTask = tasks.getByName(sourceSets.getByName(sourceSet).getCompileTaskName("java"))
  assertJavaCompileHasProtoGeneratedDir(project, sourceSet, compileJavaTask, codegenPlugins)
}

test.doLast {
  org.junit.Assert.assertEquals(
      ['generateProto', 'generateNanoProto', 'generateGrpcProto',
       'generateGrpc_nanoProto', 'generateTestProto'] as Set,
       protobuf.generateProtoTasks.all().collect({ it.name }) as Set)
  org.junit.Assert.assertEquals(
      ['generateProto'] as Set,
       protobuf.generateProtoTasks.ofSourceSet('main').collect({ it.name }) as Set)
  org.junit.Assert.assertEquals(
      ['generateNanoProto'] as Set,
       protobuf.generateProtoTasks.ofSourceSet('nano').collect({ it.name }) as Set)
  assertJavaCompileHasProtoGeneratedDir('main', ['java'])
  assertJavaCompileHasProtoGeneratedDir('test', ['java'])
  assertJavaCompileHasProtoGeneratedDir('nano', ['javanano'])
  assertJavaCompileHasProtoGeneratedDir('grpc', ['java', 'grpc'])
  assertJavaCompileHasProtoGeneratedDir('grpc_nano', ['javanano', 'grpc'])
}
